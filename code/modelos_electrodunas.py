# -*- coding: utf-8 -*-
"""Modelos_ElectroDunas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t5qSrpVMOQuC3Qg3B2Jpah3dCCixyL3j
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install pyod
!pip install --upgrade pyod  # to make sure that the latest version is installed!
!pip install combo

import pandas as pd
import numpy as np
from scipy import stats
import glob
import os
import matplotlib.pyplot as plt
# %matplotlib inline
import matplotlib.font_manager
from pyod.utils.utility import standardizer

# Import models
from pyod.models.abod import ABOD
from pyod.models.cblof import CBLOF
from pyod.models.feature_bagging import FeatureBagging
from pyod.models.hbos import HBOS
from pyod.models.iforest import IForest
from pyod.models.knn import KNN
from pyod.models.lof import LOF
from pyod.models.loci import LOCI
from pyod.models.mcd import MCD
from pyod.models.ocsvm import OCSVM
from pyod.models.pca import PCA
from pyod.models.sos import SOS
from pyod.models.lscp import LSCP
from pyod.models.cof import COF
from pyod.models.sod import SOD
from pyod.utils.data import generate_data
from decimal import Decimal
from pyod.models.knn import KNN  # kNN detector
from pyod.models.combination import aom, moa, average, maximization
from pyod.utils.data import generate_data
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
detector_list = [LOF(n_neighbors=5), LOF(n_neighbors=10), LOF(n_neighbors=15),
                 LOF(n_neighbors=20), LOF(n_neighbors=25), LOF(n_neighbors=30),
                 LOF(n_neighbors=35), LOF(n_neighbors=40), LOF(n_neighbors=45),
                 LOF(n_neighbors=50)]

all_files = glob.glob(os.path.join("/", "*.csv"))

df_from_each_file = (pd.read_csv(f, sep=",") for f in all_files)
df_elec = pd.concat(df_from_each_file, axis=0, ignore_index=True)

df_elec.head()

random_state = np.random.RandomState(42)
outliers_fraction = 0.01
# Define outlier detection
classifiers = {
        #'Angle-based Outlier Detector (ABOD)': ABOD(contamination=outliers_fraction),
        #'Cluster-based Local Outlier Factor (X)':CBLOF(contamination=outliers_fraction,check_estimator=False, random_state=random_state),
        #'Feature_Bagging_LOF':FeatureBagging(LOF(n_neighbors=35),contamination=outliers_fraction,check_estimator=False,random_state=random_state),
        #'Feature_Bagging_IForest':FeatureBagging(IForest(contamination=outliers_fraction,random_state=random_state),contamination=outliers_fraction,check_estimator=False,random_state=random_state),
        #'Feature_Bagging_CBLOF':FeatureBagging(CBLOF(contamination=outliers_fraction,check_estimator=False, random_state=random_state),contamination=outliers_fraction,check_estimator=False,random_state=random_state),
        ##'Feature_Bagging_LOCI':FeatureBagging(LOCI(k=35, alpha=0.5,contamination=outliers_fraction),contamination=outliers_fraction,check_estimator=False,random_state=random_state),
        #'Histogram-base Outlier Detection (HBOS)': HBOS(contamination=outliers_fraction),
        #'Isolation_Forest': IForest(contamination=outliers_fraction,random_state=random_state),
        #'K Nearest Neighbors (KNN)': KNN(contamination=outliers_fraction),
        'Average KNN': KNN(method='mean',contamination=outliers_fraction),
        #'LOF_10':LOF(n_neighbors=10, contamination=outliers_fraction),
        #'LOF_20':LOF(n_neighbors=20, contamination=outliers_fraction),
        #'LOF_30':LOF(n_neighbors=30, contamination=outliers_fraction),
        #'LOF_40':LOF(n_neighbors=40, contamination=outliers_fraction),
        #'LOF_50':LOF(n_neighbors=50, contamination=outliers_fraction),
        ##'LOCI':LOCI(k=35, alpha=0.5,contamination=outliers_fraction),
        #'Minimum Covariance Determinant (MCD)': MCD(contamination=outliers_fraction, random_state=random_state),
        #'One-class SVM (OCSVM)': OCSVM(contamination=outliers_fraction),
        #'Locally Selective Combination (LSCP)': LSCP(detector_list, contamination=outliers_fraction,random_state=random_state),
        ##'Connectivity-Based Outlier Factor (COF)': COF(n_neighbors=35, contamination=outliers_fraction),
        ###'Subspace Outlier Detection (SOD)': SOD(contamination=outliers_fraction),
        #'Stochastic Outlier Selection (SOS)': SOS(contamination=outliers_fraction),
        #'Median KNN': KNN(method='median', contamination=outliers_fraction)
}

data=pd.DataFrame()
X= df_elec[['Active_energy', 'Reactive_energy', 'Voltaje_FA', 'Voltaje_FC']]
for i, (clf_name, clf) in enumerate(classifiers.items()):
    clf.fit(X)
    scores_pred = clf.decision_function(X)
    y_pred = clf.predict(X)
    n_inliers = len(y_pred) - np.count_nonzero(y_pred)
    n_outliers = np.count_nonzero(y_pred == 1)
    dfx = X
    dfx.insert(0, clf_name, y_pred)
    dfx.insert(0, clf_name+'score', scores_pred)
    print('OUTLIERS : ',n_outliers,'INLIERS : ',n_inliers, clf_name)
  data=data.append(dfx,ignore_index=False)

